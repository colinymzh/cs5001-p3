package view;

import controller.ButtonController;
import controller.CanvasPanelController;
import network.NetworkClient;
import utils.CanvasSaver;
import utils.JsonProcessor;
import utils.UpdateShapeEditor;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.Container;
import java.awt.Font;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;

import static utils.JsonProcessor.filterJsonObjects;
import static view.ButtonResourceLoader.*;

/**
 * The main application class for the Vector Drawing application. This class extends JFrame and
 * provides the graphical user interface for drawing and managing vector shapes.
 * It includes various drawing tools, menus, and options.
 */
public class VectorDrawingApp  extends JFrame {

    // Declare instance variables
    private JToolBar toolBarLeft;
    private JToolBar toolBarRight;

    // Declare buttons for various drawing tools
    JButton button_NewCanvas;
    JButton button_Undo;
    JButton button_Eraser;
    JButton button_Curve;
    JButton button_Line;
    JButton button_Rectangle;
    JButton button_Square;
    JButton button_Cube;
    JButton button_RoundedRectangle;
    JButton button_Oval;
    JButton button_Circle;
    JButton button_Triangle;
    JButton button_ShapeColor;
    JButton button_Select;
    JButton button_Fill;
    JButton button_Resize;
    JButton button_Login;
    JButton button_GetDrawings;
    JButton button_AddDrawing;
    JButton button_UpdateDrawing;
    JButton button_DeleteDrawing;

    // Declare controllers and labels
    private CanvasPanelController canvasPanelController;
    private static JLabel mouseStateTable;

    /**
     * Action performed when the "Exit" menu item is clicked.
     *
     * @param e The ActionEvent generated by the menu item.
     */
    private void menuItemExitActionPerformed(ActionEvent e) { System.exit(0); }

    /**
     * Action performed when the "Set Shape Color" menu item is clicked.
     *
     * @param e The ActionEvent generated by the menu item.
     */
    private void menuItemShapeColorActionPerformed(ActionEvent e) { buttonShapeColorActionPerformed(e); }

    /**
     * Action performed when the "Set Background Color" menu item is clicked.
     *
     * @param e The ActionEvent generated by the menu item.
     */
    private void menuItemBackgroundColorActionPerformed(ActionEvent e) {
        Color temp = JColorChooser.showDialog(this,"请选择画布颜色", canvasPanelController.getShapeColor());
        if (temp != null)
            canvasPanelController.setBackgroundColor(temp);
    }

    /**
     * Action performed when the "Undo" menu item is clicked.
     *
     * @param e The ActionEvent generated by the menu item.
     */
    private void menuItemUndoActionPerformed(ActionEvent e) { canvasPanelController.undo(); }

    /**
     * Action performed when the "Export" menu item is clicked.
     *
     * @param e The ActionEvent generated by the menu item.
     */
    private void menuItemExportActionPerformed(ActionEvent e) {
        exportCanvas();
    }

    /**
     * Exports the canvas to an image file.
     */
    private void exportCanvas() {
        // Create a file chooser
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Canvas");

        // Set file type filter to display only image file types
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image File (*.png, *.jpg)", "png", "jpg");
        fileChooser.setFileFilter(filter);

        // Show the save dialog
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Ensure the file has the correct extension
            if (!filePath.toLowerCase().endsWith(".png") && !filePath.toLowerCase().endsWith(".jpg")) {
                filePath += ".png"; // Default to saving as PNG
            }

            // Determine the file format
            String format = filePath.endsWith(".jpg") ? "jpg" : "png";

            // Call CanvasSaver to save the canvas content
            CanvasSaver.saveCanvas(canvasPanelController, format, filePath);
        }
    }


    /**
     * Initializes the left toolbar in the user interface. This method creates and configures the toolbar
     * with various drawing tool buttons and controls for the Vector Drawing application.
     */
    private void initToolBarLeft() {
        // Create the left toolbar
        toolBarLeft = new JToolBar("Tool Bar", JToolBar.HORIZONTAL);
        toolBarLeft.setBackground(Color.WHITE);

        // Initialize buttons
        button_NewCanvas = initializeTextButton(ButtonController.NewCanvas, "New Canvas", this::buttonNewFileActionPerformed);
        button_Eraser = initializeTextButton(ButtonController.Eraser,"Eraser", this::buttonEraserActionPerformed);
        button_Curve = initializeTextButton(ButtonController.Curve,"Curve", this::buttonCurveActionPerformed);
        button_Line = initializeTextButton(ButtonController.Line, "Line",this::buttonLineActionPerformed);
        button_Rectangle = initializeTextButton(ButtonController.Rectangle,"Rectangle", this::buttonRectangleActionPerformed);
        button_Square = initializeTextButton(ButtonController.Square,"Square", this::buttonSquareActionPerformed);
        button_Cube = initializeTextButton(ButtonController.Cube,"Cube", this::buttonCubeActionPerformed);
        button_RoundedRectangle = initializeTextButton(ButtonController.RoundedRectangle, "Rounded Rectangle",this::buttonRoundedRectangleActionPerformed);
        button_Oval = initializeTextButton(ButtonController.Oval,"Ellipse", this::buttonOvalActionPerformed);
        button_Circle = initializeTextButton(ButtonController.Circle,"Circle", this::buttonCircleActionPerformed);
        button_Triangle = initializeTextButton(ButtonController.Triangle,"Triangle", this::buttonTriangleActionPerformed);
        button_ShapeColor = initializeTextButton(ButtonController.ShapeColor,"Shape Color", this::buttonShapeColorActionPerformed);
        button_Select = initializeTextButton(ButtonController.Select,"Select", this::buttonSelectActionPerformed);
        button_Fill = initializeTextButton(ButtonController.Fill,"Fill", this::buttonFillActionPerformed);
        button_Undo = initializeTextButton(ButtonController.Undo,"Undo", this::buttonUndoActionPerformed);
        button_Resize = initializeTextButton(ButtonController.Resize,"Resize", this::buttonResizeActionPerformed);
        button_Login = initializeTextButton(ButtonController.Login,"Login", this::buttonLoginActionPerformed);
        button_GetDrawings = initializeTextButton(ButtonController.GetDrawings,"Get", this::buttonGetDrawingsActionPerformed);
        button_AddDrawing = initializeTextButton(ButtonController.AddDrawing,"Add", this::buttonAddDrawingActionPerformed);
        button_UpdateDrawing = initializeTextButton(ButtonController.UpdateDrawing,"Update", this::buttonUpdateDrawingActionPerformed);
        button_DeleteDrawing = initializeTextButton(ButtonController.DeleteDrawing,"Delete", this::buttonDeleteDrawingActionPerformed);

        // Add buttons to the toolbar
        addButtonToToolBar(button_NewCanvas);
        addButtonToToolBar(button_Undo);
        addButtonToToolBar(button_ShapeColor);
        addButtonToToolBar(button_Select);
        addButtonToToolBar(button_Resize);
        addButtonToToolBar(button_Fill);
        toolBarLeft.addSeparator();
        addButtonToToolBar(button_Eraser);
        addButtonToToolBar(button_Line);
        addButtonToToolBar(button_Curve);
        addButtonToToolBar(button_Rectangle);
        addButtonToToolBar(button_RoundedRectangle);
        addButtonToToolBar(button_Square);
        addButtonToToolBar(button_Oval);
        addButtonToToolBar(button_Circle);
        addButtonToToolBar(button_Triangle);
        addButtonToToolBar(button_Cube);
        toolBarLeft.addSeparator();
        addButtonToToolBar(button_Login);
        addButtonToToolBar(button_GetDrawings);
        addButtonToToolBar(button_AddDrawing);
        addButtonToToolBar(button_UpdateDrawing);
        addButtonToToolBar(button_DeleteDrawing);
    }


    /**
     * Initializes a button with text.
     *
     * @param buttonId    The ID of the button.
     * @param buttonText  The text to display on the button.
     * @param action      The action to perform on button click.
     * @return The initialized JButton.
     */
    private JButton initializeTextButton(int buttonId, String buttonText, ActionListener action) {
        JButton button = new JButton(buttonText);
        button.addActionListener(action);
        button.setToolTipText(ButtonResourceLoader.buttonTips.get(buttonId));
        return button;
    }


    /**
     * Initializes a JButton with an icon and an ActionListener.
     *
     * @param controller     The controller identifier for the button.
     * @param actionListener The ActionListener to handle button clicks.
     * @return The configured JButton.
     */
    private JButton initializeButton(int controller, ActionListener actionListener) {
        JButton button = new JButton(buttonIcons.get(controller));
        button.setToolTipText(buttonTips.get(controller));
        button.addActionListener(actionListener);
        return button;
    }

    /**
     * Adds a JButton to the toolbar.
     *
     * @param button The JButton to be added.
     */
    private void addButtonToToolBar(JButton button) {
        toolBarLeft.add(button);
    }

    /**
     * Initializes the right toolbar for setting line width and rotation.
     */
    private void initToolBarRight() {
        // Create the right toolbar
        toolBarRight = new JToolBar("Line Width Bar", JToolBar.VERTICAL);
        toolBarRight.setBackground(Color.WHITE);

        // Add the stroke width slider and rotation slider
        addStrokeSlider();
    }

    /**
     * Adds a stroke width slider and a rotation slider to the right toolbar.
     */
    private void addStrokeSlider() {

        final JSlider strokeJSlide = createStrokeSlider();
        toolBarRight.add(strokeJSlide);
        final JSlider rotationJSlide = createRotationSlider();
        toolBarRight.add(rotationJSlide);
    }


    /**
     * Creates a JSlider for adjusting the line stroke width.
     *
     * @return The configured JSlider.
     */
    private JSlider createStrokeSlider() {
        final JSlider strokeSizeSlider = new JSlider(SwingConstants.VERTICAL, 1, 20, 3);
        strokeSizeSlider.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"),
                "Line Width", TitledBorder.CENTER, TitledBorder.ABOVE_TOP, null, Color.BLACK));
        strokeSizeSlider.setMajorTickSpacing(5);
        strokeSizeSlider.setMinorTickSpacing(1);
        strokeSizeSlider.setPaintTicks(true);
        strokeSizeSlider.setPaintLabels(true);
        strokeSizeSlider.setLabelTable(createLineWidthLabelTable());

        strokeSizeSlider.addChangeListener(e -> {
            int strokeSize = strokeSizeSlider.getValue();
            canvasPanelController.setCurrentStroke(strokeSize);
        });

        return strokeSizeSlider;
    }


    /**
     * Creates a JSlider for adjusting the rotation angle.
     *
     * @return The configured JSlider.
     */
    private JSlider createRotationSlider() {
         JSlider strokeSizeSlider = new JSlider(SwingConstants.VERTICAL, 0, 360, 0);
        strokeSizeSlider.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"),
                "Rotation", TitledBorder.CENTER, TitledBorder.ABOVE_TOP, null, Color.BLACK));
        strokeSizeSlider.setMajorTickSpacing(90);
        strokeSizeSlider.setMinorTickSpacing(30);
        strokeSizeSlider.setPaintTicks(true);
        strokeSizeSlider.setPaintLabels(true);
        strokeSizeSlider.setLabelTable(createRotationLabelTable());

        strokeSizeSlider.addChangeListener(e -> {
            int angle = strokeSizeSlider.getValue();
            canvasPanelController.rotateSelectedShape(angle);

        });

        return strokeSizeSlider;
    }

    /**
     * Resets the canvas by invoking the 'resetCanvas' method of the 'canvasPanelController'.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonNewFileActionPerformed(ActionEvent e) { canvasPanelController.resetCanvas(); }

    /**
     * Sets the canvas tool, cursor, prepares for a new shape, and triggers a repaint on the canvas panel.
     *
     * @param tool   The identifier for the selected tool.
     * @param cursor The cursor type to be set.
     */
    private void setCanvasTool(int tool, int cursor) {
        canvasPanelController.setCurrentCursor(cursor);
        canvasPanelController.setCurrentTool(tool);
        canvasPanelController.prepareNewShape();
        canvasPanelController.repaint();
    }

    /**
     * Handles the action when the 'Eraser' button is clicked, setting the tool to eraser and the cursor to default.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonEraserActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Eraser, Cursor.DEFAULT_CURSOR);
    }

    /**
     * Handles the action when the 'Curve' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonCurveActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Curve, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Line' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonLineActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Line, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Rectangle' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonRectangleActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Rectangle, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Square' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonSquareActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Square, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Cube' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonCubeActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Cube, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'RoundedRectangle' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonRoundedRectangleActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.RoundedRectangle, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Oval' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonOvalActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Oval, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Circle' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonCircleActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Circle, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Handles the action when the 'Triangle' button is clicked, setting the tool to curve and the cursor to crosshair.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonTriangleActionPerformed(ActionEvent e) {
        setCanvasTool(ButtonController.Triangle, Cursor.CROSSHAIR_CURSOR);
    }

    /**
     * Allows the user to choose and set a color for the shape by invoking a color chooser dialog.
     */
    private void chooseAndSetColor() {
        Color chosenColor = JColorChooser.showDialog(this, "Please choose color", canvasPanelController.getShapeColor());
        if (chosenColor != null) {
            canvasPanelController.setShapeColor(chosenColor);
        }
    }

    /**
     * Sets the tool and cursor for shape selection.
     *
     * @param tool   The identifier for the selected tool.
     * @param cursor The cursor type to be set.
     */
    private void setToolAndCursor(int tool, int cursor) {
        canvasPanelController.setCurrentCursor(cursor);
        canvasPanelController.setCurrentTool(tool);
    }

    /**
     * Handles the action when the 'Shape Color' button is clicked, allowing the user to choose and set the shape color.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonShapeColorActionPerformed(ActionEvent e) {
        chooseAndSetColor();
    }

    /**
     * Handles the action when the 'Select' button is clicked, setting the tool to selection and the cursor to move.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonSelectActionPerformed(ActionEvent e) {
        setToolAndCursor(ButtonController.Select, Cursor.MOVE_CURSOR);
    }

    /**
     * Handles the action when the 'Fill' button is clicked, setting the tool to fill and the cursor to default.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonFillActionPerformed(ActionEvent e) {
        setToolAndCursor(ButtonController.Fill, Cursor.DEFAULT_CURSOR);
    }

    /**
     * Handles the action when the 'Undo' button is clicked, triggering an undo operation on the canvas panel.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonUndoActionPerformed(ActionEvent e) {
        canvasPanelController.undo();
    }

    /**
     * Handles the action when the 'Resize' button is clicked, setting the tool to resize and the cursor to move.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonResizeActionPerformed(ActionEvent e) {
        setToolAndCursor(ButtonController.Resize, Cursor.MOVE_CURSOR);
    }

    // Network Section

    NetworkClient client = new NetworkClient();

    /**
     * Handles the action when the 'Login' button is clicked. It connects to the server,
     * performs a login using the provided token, and displays the login result in a dialog.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonLoginActionPerformed(ActionEvent e) {
        // Display a dialog to input a token with a default value
        String token = JOptionPane.showInputDialog(null, "Enter Token:", "5d0ae333-62c1-4c87-9db0-b4cc68b42555");
        if (token != null && !token.trim().isEmpty()) {

            try {
                client.connect();
                System.out.println("Connected to the server.");

                // Perform the login
                client.login(token);

                // Display the login result
                String loginResult = client.loginResponse;
                JOptionPane.showMessageDialog(null, loginResult);
            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, "Error: " + exception.getMessage());
                exception.printStackTrace();
            }
        } else {
            // User canceled or did not provide a token
            JOptionPane.showMessageDialog(null, "Login cancelled or no token provided.");
        }
    }

    /**
     * Handles the action when the 'Get Drawings' button is clicked. It checks if the client is logged in,
     * retrieves drawings from the server, and displays them on the canvas.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonGetDrawingsActionPerformed(ActionEvent e) {
        if (client == null || client.loginResponse == null) {

                JOptionPane.showMessageDialog(null, "You are not logged in. Please login first.");

        } else {
            try {
                client.getDrawings();
                JOptionPane.showMessageDialog(null, "The client has get all drawings.");
                canvasPanelController.drawShapesFromJson(client.getDrawingsJsonArray());
            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, "Error: " + exception.getMessage());
                exception.printStackTrace();
            }
        }

    }

    /**
     * Handles the action when the 'Add Drawing' button is clicked. It checks if the client is logged in,
     * retrieves the selected shape JSON from the canvas panel, and sends it to the server to add a new drawing.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonAddDrawingActionPerformed(ActionEvent e) {
        if (client == null || client.loginResponse == null) {
            JOptionPane.showMessageDialog(null, "You are not logged in. Please login first.");
        } else {

            String jsonResult = canvasPanelController.getSelectedShapeJson();
            if ("No shape selected".equals(jsonResult)) {
                JOptionPane.showMessageDialog(null, "No shape selected.");
            } else if ("Unsupported shape type".equals(jsonResult)) {
                JOptionPane.showMessageDialog(null, "This feature only supports rectangle, ellipse, triangle, and line.");
            } else {
                try {
                    client.addDrawing(canvasPanelController.getSelectedShapeJson());
                    JOptionPane.showMessageDialog(null, client.addDrawingResponse);
                } catch (IOException exception) {
                    JOptionPane.showMessageDialog(null, "Error: " + exception.getMessage());
                    exception.printStackTrace();
                }

            }

        }
    }

    /**
     * Handles the action when the 'Update Drawing' button is clicked. It checks if the client is logged in,
     * retrieves the drawings from the server, displays a selection dialog for the user to choose a drawing to update,
     * and sends the updated drawing to the server.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonUpdateDrawingActionPerformed(ActionEvent e) {
        if (client == null || client.loginResponse == null) {
            JOptionPane.showMessageDialog(null, "You are not logged in. Please login first.");
        } else {
            try {
                client.getDrawings();

                // Filter and store drawings from the server response
                JsonArray myDrawings = filterJsonObjects(client.getDrawingsJsonArray().toString());
                client.setMyDrawingsJsonArray(myDrawings);

                String[] choices = new String[myDrawings.size()];
                for (int i = 0; i < myDrawings.size(); i++) {
                    JsonObject obj = myDrawings.getJsonObject(i);
                    String displayText = "ID: " + obj.getString("id") +
                            ", Type: " + obj.getString("type") +
                            ", X: " + obj.getInt("x") +
                            ", Y: " + obj.getInt("y");
                    choices[i] = displayText;
                }

                // Display a dialog for the user to select a drawing to update
                String selectedValue = (String) JOptionPane.showInputDialog(null, "Choose drawing:",
                        "Select a drawing that you added to update", JOptionPane.QUESTION_MESSAGE, null, choices, choices[0]);

                if (selectedValue != null && !selectedValue.isEmpty()) {
                    int idStart = selectedValue.indexOf("ID: ") + 4;
                    int idEnd = selectedValue.indexOf(",", idStart);
                    String selectedId = selectedValue.substring(idStart, idEnd);

                    // Find the selected drawing object in myDrawings JsonArray
                    JsonObject selectedObject = null;
                    for (int i = 0; i < myDrawings.size(); i++) {
                        JsonObject obj = myDrawings.getJsonObject(i);
                        if (obj.getString("id").equals(selectedId)) {
                            selectedObject = obj;
                            break;
                        }
                    }

                    // Update the selected drawing and send it to the server
                    JsonObject updatedJsonObject = UpdateShapeEditor.updateRectangleProperties(selectedObject);

                    client.updateDrawing(updatedJsonObject);
                    JOptionPane.showMessageDialog(null, "You have successfully updated your shape.");
                }

            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, "Error: " + exception.getMessage());
                exception.printStackTrace();
            }
        }
    }

    /**
     * Handles the action when the 'Delete Drawing' button is clicked. It checks if the client is logged in,
     * retrieves the drawings from the server, displays a selection dialog for the user to choose a drawing to delete,
     * and sends a request to the server to delete the selected drawing.
     *
     * @param e The ActionEvent associated with the button click.
     */
    private void buttonDeleteDrawingActionPerformed(ActionEvent e) {
        if (client == null || client.loginResponse == null) {
            JOptionPane.showMessageDialog(null, "You are not logged in. Please login first.");
        } else {
            try {
                client.getDrawings();

                // Filter and store drawings from the server response
                JsonArray myDrawings = filterJsonObjects(client.getDrawingsJsonArray().toString());
                client.setMyDrawingsJsonArray(myDrawings);

                String[] choices = new String[myDrawings.size()];
                for (int i = 0; i < myDrawings.size(); i++) {
                    JsonObject obj = myDrawings.getJsonObject(i);
                    String displayText = "ID: " + obj.getString("id") +
                            ", Type: " + obj.getString("type") +
                            ", X: " + obj.getInt("x") +
                            ", Y: " + obj.getInt("y");
                    choices[i] = displayText;
                }

                // Display a dialog for the user to select a drawing to delete
                String selectedValue = (String) JOptionPane.showInputDialog(null, "Choose drawing:",
                        "Select a drawing that you added to delete", JOptionPane.QUESTION_MESSAGE, null, choices, choices[0]);

                if (selectedValue != null && !selectedValue.isEmpty()) {
                    // Extract the ID from the selected string
                    String selectedId;
                    int idStart = selectedValue.indexOf("ID: ") + 4;
                    int idEnd = selectedValue.indexOf(",", idStart);
                    selectedId = selectedValue.substring(idStart, idEnd);

                    try {
                        // Send a request to delete the selected drawing
                        client.deleteDrawing(selectedId);
                        JOptionPane.showMessageDialog(null, "The Shape you selected has been deleted.");
                    } catch (IOException exception) {
                        JOptionPane.showMessageDialog(null, "Error sending delete request: " + exception.getMessage());
                        exception.printStackTrace();
                    }
                }

            } catch (IOException exception) {
                JOptionPane.showMessageDialog(null, "Error: " + exception.getMessage());
                exception.printStackTrace();
            }
        }
    }

    /**
     * Initializes the main application window and its components, including menu bar, toolbars, canvas panel, and labels.
     * This method is typically called when the application starts.
     */
    public void init() {
        // Configure the main window
        setTitle("Vector Drawing Tool");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Toolkit tool = Toolkit.getDefaultToolkit(); // Use Toolkit.getDefaultToolkit()
        Dimension dim = tool.getScreenSize();
        setBounds(100, 100, dim.width - 200, dim.height - 200); // Set the window size relative to screen size

        // Retrieve the content pane for component addition
        Container contentPane = getContentPane();
        // contentPane.setLayout(new BorderLayout()); // Commented out as it's the default layout

        // Set up the menu bar
        MenuBarManager menuBarManager = new MenuBarManager(
                this::menuItemExitActionPerformed,
                this::menuItemShapeColorActionPerformed,
                this::menuItemBackgroundColorActionPerformed,
                this::menuItemUndoActionPerformed,
                this::menuItemExportActionPerformed
        );
        setJMenuBar(menuBarManager.getMenuBar());

        // Initialize and add the toolbar
        initToolBarLeft(); // Assuming this method sets up the toolbar
        contentPane.add(toolBarLeft, BorderLayout.NORTH);
        initToolBarRight(); // Assuming this method sets up the toolbar
        contentPane.add(toolBarRight, BorderLayout.EAST);


        // Initialize and add the drawing panel
        canvasPanelController = new CanvasPanelController();
        contentPane.add(canvasPanelController, BorderLayout.CENTER);

        // Initialize and add the mouse state label
        mouseStateTable = new JLabel();
        mouseStateTable.setFont(new Font("Default", Font.PLAIN, 12));
        mouseStateTable.setForeground(Color.black);
        contentPane.add(mouseStateTable, BorderLayout.SOUTH);

        repaint(); // Refresh the frame to apply changes
    }

    /**
     * Sets the text for the mouse state label.
     *
     * @param info The text to be displayed on the mouse state label.
     */
    public static void setMouseStateTable(String info) { mouseStateTable.setText(info); }
}
